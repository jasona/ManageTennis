//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Oasis.Lib
{
    public partial class Event
    {
        #region Primitive Properties
    
        public virtual int EventId
        {
            get;
            set;
        }
    
        public virtual string Title
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual System.DateTime EventDate
        {
            get;
            set;
        }
    
        public virtual Nullable<int> RankingBitMask
        {
            get;
            set;
        }
    
        public virtual Nullable<int> DemographicBitMask
        {
            get;
            set;
        }
    
        public virtual int EventTypeId
        {
            get { return _eventTypeId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_eventTypeId != value)
                    {
                        if (EventType != null && EventType.EventTypeId != value)
                        {
                            EventType = null;
                        }
                        _eventTypeId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _eventTypeId;
    
        public virtual bool USTASanctioned
        {
            get;
            set;
        }
    
        public virtual Nullable<int> ProUserId
        {
            get { return _proUserId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_proUserId != value)
                    {
                        if (User != null && User.UserId != value)
                        {
                            User = null;
                        }
                        _proUserId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private Nullable<int> _proUserId;
    
        public virtual int EventStatusId
        {
            get { return _eventStatusId; }
            set
            {
                try
                {
                    _settingFK = true;
                    if (_eventStatusId != value)
                    {
                        if (EventStatu != null && EventStatu.EventStatusId != value)
                        {
                            EventStatu = null;
                        }
                        _eventStatusId = value;
                    }
                }
                finally
                {
                    _settingFK = false;
                }
            }
        }
        private int _eventStatusId;
    
        public virtual bool PrivateEvent
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> MemberCost
        {
            get;
            set;
        }
    
        public virtual Nullable<decimal> NonMemberCost
        {
            get;
            set;
        }
    
        public virtual string EncodedTitle
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual EventType EventType
        {
            get { return _eventType; }
            set
            {
                if (!ReferenceEquals(_eventType, value))
                {
                    var previousValue = _eventType;
                    _eventType = value;
                    FixupEventType(previousValue);
                }
            }
        }
        private EventType _eventType;
    
        public virtual User User
        {
            get { return _user; }
            set
            {
                if (!ReferenceEquals(_user, value))
                {
                    var previousValue = _user;
                    _user = value;
                    FixupUser(previousValue);
                }
            }
        }
        private User _user;
    
        public virtual ICollection<EventRegistration> EventRegistrations
        {
            get
            {
                if (_eventRegistrations == null)
                {
                    var newCollection = new FixupCollection<EventRegistration>();
                    newCollection.CollectionChanged += FixupEventRegistrations;
                    _eventRegistrations = newCollection;
                }
                return _eventRegistrations;
            }
            set
            {
                if (!ReferenceEquals(_eventRegistrations, value))
                {
                    var previousValue = _eventRegistrations as FixupCollection<EventRegistration>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEventRegistrations;
                    }
                    _eventRegistrations = value;
                    var newValue = value as FixupCollection<EventRegistration>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEventRegistrations;
                    }
                }
            }
        }
        private ICollection<EventRegistration> _eventRegistrations;
    
        public virtual EventStatu EventStatu
        {
            get { return _eventStatu; }
            set
            {
                if (!ReferenceEquals(_eventStatu, value))
                {
                    var previousValue = _eventStatu;
                    _eventStatu = value;
                    FixupEventStatu(previousValue);
                }
            }
        }
        private EventStatu _eventStatu;

        #endregion
        #region Association Fixup
    
        private bool _settingFK = false;
    
        private void FixupEventType(EventType previousValue)
        {
            if (previousValue != null && previousValue.Events.Contains(this))
            {
                previousValue.Events.Remove(this);
            }
    
            if (EventType != null)
            {
                if (!EventType.Events.Contains(this))
                {
                    EventType.Events.Add(this);
                }
                if (EventTypeId != EventType.EventTypeId)
                {
                    EventTypeId = EventType.EventTypeId;
                }
            }
        }
    
        private void FixupUser(User previousValue)
        {
            if (previousValue != null && previousValue.Events.Contains(this))
            {
                previousValue.Events.Remove(this);
            }
    
            if (User != null)
            {
                if (!User.Events.Contains(this))
                {
                    User.Events.Add(this);
                }
                if (ProUserId != User.UserId)
                {
                    ProUserId = User.UserId;
                }
            }
            else if (!_settingFK)
            {
                ProUserId = null;
            }
        }
    
        private void FixupEventStatu(EventStatu previousValue)
        {
            if (previousValue != null && previousValue.Events.Contains(this))
            {
                previousValue.Events.Remove(this);
            }
    
            if (EventStatu != null)
            {
                if (!EventStatu.Events.Contains(this))
                {
                    EventStatu.Events.Add(this);
                }
                if (EventStatusId != EventStatu.EventStatusId)
                {
                    EventStatusId = EventStatu.EventStatusId;
                }
            }
        }
    
        private void FixupEventRegistrations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EventRegistration item in e.NewItems)
                {
                    item.Event = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EventRegistration item in e.OldItems)
                {
                    if (ReferenceEquals(item.Event, this))
                    {
                        item.Event = null;
                    }
                }
            }
        }

        #endregion
    }
}
