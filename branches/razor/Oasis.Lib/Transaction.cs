//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;

namespace Oasis.Lib
{
    public partial class Transaction
    {
        #region Primitive Properties
    
        public virtual int TransactionId
        {
            get;
            set;
        }
    
        public virtual decimal Amount
        {
            get;
            set;
        }
    
        public virtual string Description
        {
            get;
            set;
        }
    
        public virtual int UserBillingId
        {
            get { return _userBillingId; }
            set
            {
                if (_userBillingId != value)
                {
                    if (UserBilling != null && UserBilling.UserBillingId != value)
                    {
                        UserBilling = null;
                    }
                    _userBillingId = value;
                }
            }
        }
        private int _userBillingId;
    
        public virtual System.DateTime PaymentDate
        {
            get;
            set;
        }
    
        public virtual string Status
        {
            get;
            set;
        }
    
        public virtual string StatusDescription
        {
            get;
            set;
        }

        #endregion
        #region Navigation Properties
    
        public virtual ICollection<EventRegistration> EventRegistrations
        {
            get
            {
                if (_eventRegistrations == null)
                {
                    var newCollection = new FixupCollection<EventRegistration>();
                    newCollection.CollectionChanged += FixupEventRegistrations;
                    _eventRegistrations = newCollection;
                }
                return _eventRegistrations;
            }
            set
            {
                if (!ReferenceEquals(_eventRegistrations, value))
                {
                    var previousValue = _eventRegistrations as FixupCollection<EventRegistration>;
                    if (previousValue != null)
                    {
                        previousValue.CollectionChanged -= FixupEventRegistrations;
                    }
                    _eventRegistrations = value;
                    var newValue = value as FixupCollection<EventRegistration>;
                    if (newValue != null)
                    {
                        newValue.CollectionChanged += FixupEventRegistrations;
                    }
                }
            }
        }
        private ICollection<EventRegistration> _eventRegistrations;
    
        public virtual UserBilling UserBilling
        {
            get { return _userBilling; }
            set
            {
                if (!ReferenceEquals(_userBilling, value))
                {
                    var previousValue = _userBilling;
                    _userBilling = value;
                    FixupUserBilling(previousValue);
                }
            }
        }
        private UserBilling _userBilling;

        #endregion
        #region Association Fixup
    
        private void FixupUserBilling(UserBilling previousValue)
        {
            if (previousValue != null && previousValue.Transactions.Contains(this))
            {
                previousValue.Transactions.Remove(this);
            }
    
            if (UserBilling != null)
            {
                if (!UserBilling.Transactions.Contains(this))
                {
                    UserBilling.Transactions.Add(this);
                }
                if (UserBillingId != UserBilling.UserBillingId)
                {
                    UserBillingId = UserBilling.UserBillingId;
                }
            }
        }
    
        private void FixupEventRegistrations(object sender, NotifyCollectionChangedEventArgs e)
        {
            if (e.NewItems != null)
            {
                foreach (EventRegistration item in e.NewItems)
                {
                    item.Transaction = this;
                }
            }
    
            if (e.OldItems != null)
            {
                foreach (EventRegistration item in e.OldItems)
                {
                    if (ReferenceEquals(item.Transaction, this))
                    {
                        item.Transaction = null;
                    }
                }
            }
        }

        #endregion
    }
}
